// Generated by gencpp from file nubot_common/BallHandleRequest.msg
// DO NOT EDIT!


#ifndef NUBOT_COMMON_MESSAGE_BALLHANDLEREQUEST_H
#define NUBOT_COMMON_MESSAGE_BALLHANDLEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nubot_common
{
template <class ContainerAllocator>
struct BallHandleRequest_
{
  typedef BallHandleRequest_<ContainerAllocator> Type;

  BallHandleRequest_()
    : enable(0)  {
    }
  BallHandleRequest_(const ContainerAllocator& _alloc)
    : enable(0)  {
  (void)_alloc;
    }



   typedef int64_t _enable_type;
  _enable_type enable;





  typedef boost::shared_ptr< ::nubot_common::BallHandleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nubot_common::BallHandleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct BallHandleRequest_

typedef ::nubot_common::BallHandleRequest_<std::allocator<void> > BallHandleRequest;

typedef boost::shared_ptr< ::nubot_common::BallHandleRequest > BallHandleRequestPtr;
typedef boost::shared_ptr< ::nubot_common::BallHandleRequest const> BallHandleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nubot_common::BallHandleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nubot_common::BallHandleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nubot_common::BallHandleRequest_<ContainerAllocator1> & lhs, const ::nubot_common::BallHandleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.enable == rhs.enable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nubot_common::BallHandleRequest_<ContainerAllocator1> & lhs, const ::nubot_common::BallHandleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nubot_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nubot_common::BallHandleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nubot_common::BallHandleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::BallHandleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::BallHandleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::BallHandleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::BallHandleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nubot_common::BallHandleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c72133dd88f3c751f622755eeb9383c7";
  }

  static const char* value(const ::nubot_common::BallHandleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc72133dd88f3c751ULL;
  static const uint64_t static_value2 = 0xf622755eeb9383c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::nubot_common::BallHandleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nubot_common/BallHandleRequest";
  }

  static const char* value(const ::nubot_common::BallHandleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nubot_common::BallHandleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 enable\n"
;
  }

  static const char* value(const ::nubot_common::BallHandleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nubot_common::BallHandleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BallHandleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nubot_common::BallHandleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nubot_common::BallHandleRequest_<ContainerAllocator>& v)
  {
    s << indent << "enable: ";
    Printer<int64_t>::stream(s, indent + "  ", v.enable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NUBOT_COMMON_MESSAGE_BALLHANDLEREQUEST_H
